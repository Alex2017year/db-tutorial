(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{499:function(t,s,a){"use strict";a.r(s);var r=a(14),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能优化"}},[t._v("#")]),t._v(" Mysql 性能优化")]),t._v(" "),a("h2",{attrs:{id:"一、mysql-查询过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、mysql-查询过程"}},[t._v("#")]),t._v(" 一、MySQL 查询过程")]),t._v(" "),a("p",[t._v("想针对 Mysql 进行优化，很有必要先了解 Mysql 的查询过程，才能做到有的放矢。")]),t._v(" "),a("p",[t._v("很多的查询优化工作实际上就是遵循一些原则让 MySQL 的优化器能够按照预想的合理方式运行而已。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/snap/20200227201908.jpg",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"（1）客户端-服务端通信协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（1）客户端-服务端通信协议"}},[t._v("#")]),t._v(" （1）客户端/服务端通信协议")]),t._v(" "),a("p",[t._v("MySQL 客户端/服务端通信是半双工模式：即任一时刻，要么是服务端向客户端发送数据，要么是客户端向服务器发送数据。")]),t._v(" "),a("p",[t._v("客户端用一个单独的数据包将查询请求发送给服务器，所以当查询语句很长的时候，需要设置"),a("code",[t._v("max_allowed_packet")]),t._v("参数。但是需要注意的是，如果查询实在是太大，服务端会拒绝接收更多数据并抛出异常。")]),t._v(" "),a("h3",{attrs:{id:"（2）查询缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（2）查询缓存"}},[t._v("#")]),t._v(" （2）查询缓存")]),t._v(" "),a("p",[t._v("解析一个查询语句前，如果查询缓存是打开的，那么 MySQL 会检查这个查询语句是否命中查询缓存中的数据。如果当前查询恰好命中查询缓存，在检查一次用户权限后直接返回缓存中的结果。这种情况下，查询不会被解析，也不会生成执行计划，更不会执行。")]),t._v(" "),a("p",[t._v("MySQL 将缓存存放在一个引用表（不要理解成"),a("code",[t._v("table")]),t._v("，可以认为是类似于"),a("code",[t._v("HashMap")]),t._v("的数据结构），通过一个哈希值索引，这个哈希值通过查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息计算得来。所以两个查询在任何字符上的不同（例如：空格、注释），都会导致缓存不会命中。")]),t._v(" "),a("p",[a("strong",[t._v("如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、mysql 库中的系统表，其查询结果")]),t._v(" "),a("strong",[t._v("都不会被缓存")]),t._v("。比如函数"),a("code",[t._v("NOW()")]),t._v("或者"),a("code",[t._v("CURRENT_DATE()")]),t._v("会因为不同的查询时间，返回不同的查询结果，再比如包含"),a("code",[t._v("CURRENT_USER")]),t._v("或者"),a("code",[t._v("CONNECION_ID()")]),t._v("的查询语句会因为不同的用户而返回不同的结果，将这样的查询结果缓存起来没有任何的意义。")]),t._v(" "),a("p",[t._v("既然是缓存，就会失效，那查询缓存何时失效呢？MySQL 的查询缓存系统会跟踪查询中涉及的每个表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。正因为如此，在任何的写操作时，MySQL 必须将对应表的所有缓存都设置为失效。如果查询缓存非常大或者碎片很多，这个操作就可能带来很大的系统消耗，甚至导致系统僵死一会儿。而且查询缓存对系统的额外消耗也不仅仅在写操作，读操作也不例外：")]),t._v(" "),a("ul",[a("li",[t._v("任何的查询语句在开始之前都必须经过检查，即使这条 SQL 语句永远不会命中缓存")]),t._v(" "),a("li",[t._v("如果查询结果可以被缓存，那么执行完成后，会将结果存入缓存，也会带来额外的系统消耗")])]),t._v(" "),a("p",[t._v("基于此，我们要知道并不是什么情况下查询缓存都会提高系统性能，缓存和失效都会带来额外消耗，只有当缓存带来的资源节约大于其本身消耗的资源时，才会给系统带来性能提升。但要如何评估打开缓存是否能够带来性能提升是一件非常困难的事情，也不在本文讨论的范畴内。如果系统确实存在一些性能问题，可以尝试打开查询缓存，并在数据库设计上做一些优化，比如：")]),t._v(" "),a("ul",[a("li",[t._v("用多个小表代替一个大表，注意不要过度设计")]),t._v(" "),a("li",[t._v("批量插入代替循环单条插入")]),t._v(" "),a("li",[t._v("合理控制缓存空间大小，一般来说其大小设置为几十兆比较合适")]),t._v(" "),a("li",[t._v("可以通过"),a("code",[t._v("SQL_CACHE")]),t._v("和"),a("code",[t._v("SQL_NO_CACHE")]),t._v("来控制某个查询语句是否需要进行缓存")])]),t._v(" "),a("p",[t._v("最后的忠告是不要轻易打开查询缓存，特别是写密集型应用。如果你实在是忍不住，可以将"),a("code",[t._v("query_cache_type")]),t._v("设置为"),a("code",[t._v("DEMAND")]),t._v("，这时只有加入"),a("code",[t._v("SQL_CACHE")]),t._v("的查询才会走缓存，其他查询则不会，这样可以非常自由地控制哪些查询需要被缓存。")]),t._v(" "),a("p",[t._v("当然查询缓存系统本身是非常复杂的，这里讨论的也只是很小的一部分，其他更深入的话题，比如：缓存是如何使用内存的？如何控制内存的碎片化？事务对查询缓存有何影响等等，读者可以自行阅读相关资料，这里权当抛砖引玉吧。")]),t._v(" "),a("h3",{attrs:{id:"（3）语法解析和预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（3）语法解析和预处理"}},[t._v("#")]),t._v(" （3）语法解析和预处理")]),t._v(" "),a("p",[t._v("MySQL 通过关键字将 SQL 语句进行解析，并生成一颗对应的解析树。这个过程解析器主要通过语法规则来验证和解析。比如 SQL 中是否使用了错误的关键字或者关键字的顺序是否正确等等。预处理则会根据 MySQL 规则进一步检查解析树是否合法。比如检查要查询的数据表和数据列是否存在等等。")]),t._v(" "),a("h3",{attrs:{id:"（4）查询优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（4）查询优化"}},[t._v("#")]),t._v(" （4）查询优化")]),t._v(" "),a("p",[t._v("经过前面的步骤生成的语法树被认为是合法的了，并且由优化器将其转化成执行计划。多数情况下，一条查询可以有很多种执行方式，最后都返回相应的结果。优化器的作用就是找到这其中最好的执行计划。")]),t._v(" "),a("p",[t._v("MySQL 使用基于成本的优化器，它尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。在 MySQL 可以通过查询当前会话的 "),a("code",[t._v("last_query_cost")]),t._v(" 的值来得到其计算当前查询的成本。")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" select "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" from t_message limit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("省略结果集\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" show status like "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'last_query_cost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Variable_name")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Value")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Last_query_cost")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6391.799000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n")])])]),a("p",[t._v("示例中的结果表示优化器认为大概需要做 6391 个数据页的随机查找才能完成上面的查询。这个结果是根据一些列的统计信息计算得来的，这些统计信息包括：每张表或者索引的页面个数、索引的基数、索引和数据行的长度、索引的分布情况等等。")]),t._v(" "),a("p",[t._v("有非常多的原因会导致 MySQL 选择错误的执行计划，比如统计信息不准确、不会考虑不受其控制的操作成本（用户自定义函数、存储过程）、MySQL 认为的最优跟我们想的不一样（我们希望执行时间尽可能短，但 MySQL 值选择它认为成本小的，但成本小并不意味着执行时间短）等等。")]),t._v(" "),a("p",[t._v("MySQL 的查询优化器是一个非常复杂的部件，它使用了非常多的优化策略来生成一个最优的执行计划：")]),t._v(" "),a("ul",[a("li",[t._v("重新定义表的关联顺序（多张表关联查询时，并不一定按照 SQL 中指定的顺序进行，但有一些技巧可以指定关联顺序）")]),t._v(" "),a("li",[t._v("优化"),a("code",[t._v("MIN()")]),t._v("和"),a("code",[t._v("MAX()")]),t._v("函数（找某列的最小值，如果该列有索引，只需要查找 B+Tree 索引最左端，反之则可以找到最大值，具体原理见下文）")]),t._v(" "),a("li",[t._v("提前终止查询（比如：使用 Limit 时，查找到满足数量的结果集后会立即终止查询）")]),t._v(" "),a("li",[t._v("优化排序（在老版本 MySQL 会使用两次传输排序，即先读取行指针和需要排序的字段在内存中对其排序，然后再根据排序结果去读取数据行，而新版本采用的是单次传输排序，也就是一次读取所有的数据行，然后根据给定的列排序。对于 I/O 密集型应用，效率会高很多）")])]),t._v(" "),a("p",[t._v("随着 MySQL 的不断发展，优化器使用的优化策略也在不断的进化，这里仅仅介绍几个非常常用且容易理解的优化策略，其他的优化策略，大家自行查阅吧。")]),t._v(" "),a("h3",{attrs:{id:"（5）查询执行引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（5）查询执行引擎"}},[t._v("#")]),t._v(" （5）查询执行引擎")]),t._v(" "),a("p",[t._v("在完成解析和优化阶段以后，MySQL 会生成对应的执行计划，查询执行引擎根据执行计划给出的指令逐步执行得出结果。整个执行过程的大部分操作均是通过调用存储引擎实现的接口来完成，这些接口被称为"),a("code",[t._v("handler API")]),t._v("。查询过程中的每一张表由一个"),a("code",[t._v("handler")]),t._v("实例表示。实际上，MySQL 在查询优化阶段就为每一张表创建了一个"),a("code",[t._v("handler")]),t._v("实例，优化器可以根据这些实例的接口来获取表的相关信息，包括表的所有列名、索引统计信息等。存储引擎接口提供了非常丰富的功能，但其底层仅有几十个接口，这些接口像搭积木一样完成了一次查询的大部分操作。")]),t._v(" "),a("h3",{attrs:{id:"（6）返回结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#（6）返回结果"}},[t._v("#")]),t._v(" （6）返回结果")]),t._v(" "),a("p",[t._v("查询过程的最后一个阶段就是将结果返回给客户端。即使查询不到数据，MySQL 仍然会返回这个查询的相关信息，比如该查询影响到的行数以及执行时间等等。")]),t._v(" "),a("p",[t._v("如果查询缓存被打开且这个查询可以被缓存，MySQL 也会将结果存放到缓存中。")]),t._v(" "),a("p",[t._v("结果集返回客户端是一个增量且逐步返回的过程。有可能 MySQL 在生成第一条结果时，就开始向客户端逐步返回结果集了。这样服务端就无须存储太多结果而消耗过多内存，也可以让客户端第一时间获得返回结果。需要注意的是，结果集中的每一行都会以一个满足 ① 中所描述的通信协议的数据包发送，再通过 TCP 协议进行传输，在传输过程中，可能对 MySQL 的数据包进行缓存然后批量发送。")]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("回头总结一下 MySQL 整个查询执行过程，总的来说分为 6 个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("客户端向 MySQL 服务器发送一条查询请求。")]),t._v(" "),a("li",[t._v("MySQL 服务器首先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段")]),t._v(" "),a("li",[t._v("MySQL 服务器进行 SQL 解析、预处理。")]),t._v(" "),a("li",[t._v("MySQL 服务器用优化器生成对应的执行计划。")]),t._v(" "),a("li",[t._v("MySQL 服务器根据执行计划，调用存储引擎的 API 来执行查询。")]),t._v(" "),a("li",[t._v("MySQL 服务器将结果返回给客户端，同时缓存查询结果。")])]),t._v(" "),a("h2",{attrs:{id:"二、数据结构优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、数据结构优化"}},[t._v("#")]),t._v(" 二、数据结构优化")]),t._v(" "),a("p",[t._v("良好的逻辑设计和物理设计是高性能的基石。")]),t._v(" "),a("h3",{attrs:{id:"数据类型优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化"}},[t._v("#")]),t._v(" 数据类型优化")]),t._v(" "),a("h4",{attrs:{id:"数据类型优化基本原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化基本原则"}},[t._v("#")]),t._v(" 数据类型优化基本原则")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("更小的通常更好")]),t._v(" - 越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的 CPU 周期也更少。\n"),a("ul",[a("li",[t._v("例如：整型比字符类型操作代价低，因而会使用整型来存储 IP 地址，使用 "),a("code",[t._v("DATETIME")]),t._v(" 来存储时间，而不是使用字符串。")])])]),t._v(" "),a("li",[a("strong",[t._v("简单就好")]),t._v(" - 如整型比字符型操作代价低。\n"),a("ul",[a("li",[t._v("例如：很多软件会用整型来存储 IP 地址。")]),t._v(" "),a("li",[t._v("例如："),a("strong",[a("code",[t._v("UNSIGNED")]),t._v(" 表示不允许负值，大致可以使正数的上限提高一倍")]),t._v("。")])])]),t._v(" "),a("li",[a("strong",[t._v("尽量避免 NULL")]),t._v(" - 可为 NULL 的列会使得索引、索引统计和值比较都更复杂。")])]),t._v(" "),a("h4",{attrs:{id:"类型的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型的选择"}},[t._v("#")]),t._v(" 类型的选择")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("整数类型通常是标识列最好的选择，因为它们很快并且可以使用 "),a("code",[t._v("AUTO_INCREMENT")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ENUM")]),t._v(" 和 "),a("code",[t._v("SET")]),t._v(" 类型通常是一个糟糕的选择，应尽量避免。")])]),t._v(" "),a("li",[a("p",[t._v("应该尽量避免用字符串类型作为标识列，因为它们很消耗空间，并且通常比数字类型慢。对于 "),a("code",[t._v("MD5")]),t._v("、"),a("code",[t._v("SHA")]),t._v("、"),a("code",[t._v("UUID")]),t._v(" 这类随机字符串，由于比较随机，所以可能分布在很大的空间内，导致 "),a("code",[t._v("INSERT")]),t._v(" 以及一些 "),a("code",[t._v("SELECT")]),t._v(" 语句变得很慢。")]),t._v(" "),a("ul",[a("li",[t._v("如果存储 UUID ，应该移除 "),a("code",[t._v("-")]),t._v(" 符号；更好的做法是，用 "),a("code",[t._v("UNHEX()")]),t._v(" 函数转换 UUID 值为 16 字节的数字，并存储在一个 "),a("code",[t._v("BINARY(16)")]),t._v(" 的列中，检索时，可以通过 "),a("code",[t._v("HEX()")]),t._v(" 函数来格式化为 16 进制格式。")])])])]),t._v(" "),a("h3",{attrs:{id:"表设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表设计"}},[t._v("#")]),t._v(" 表设计")]),t._v(" "),a("p",[t._v("应该避免的设计问题：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("太多的列")]),t._v(" - 设计者为了图方便，将大量冗余列加入表中，实际查询中，表中很多列是用不到的。这种宽表模式设计，会造成不小的性能代价，尤其是 "),a("code",[t._v("ALTER TABLE")]),t._v(" 非常耗时。")]),t._v(" "),a("li",[a("strong",[t._v("太多的关联")]),t._v(" - 所谓的实体 - 属性 - 值（EVA）设计模式是一个常见的糟糕设计模式。Mysql 限制了每个关联操作最多只能有 61 张表，但 EVA 模式需要许多自关联。")]),t._v(" "),a("li",[a("strong",[t._v("枚举")]),t._v(" - 尽量不要用枚举，因为添加和删除字符串（枚举选项）必须使用 "),a("code",[t._v("ALTER TABLE")]),t._v("。")]),t._v(" "),a("li",[t._v("尽量避免 "),a("code",[t._v("NULL")])])]),t._v(" "),a("h3",{attrs:{id:"范式和反范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范式和反范式"}},[t._v("#")]),t._v(" 范式和反范式")]),t._v(" "),a("p",[a("strong",[t._v("范式化目标是尽量减少冗余，而反范式化则相反")]),t._v("。")]),t._v(" "),a("p",[t._v("范式化的优点：")]),t._v(" "),a("ul",[a("li",[t._v("比反范式更节省空间")]),t._v(" "),a("li",[t._v("更新操作比反范式快")]),t._v(" "),a("li",[t._v("更少需要 "),a("code",[t._v("DISTINCT")]),t._v(" 或 "),a("code",[t._v("GROUP BY")]),t._v(" 语句")])]),t._v(" "),a("p",[t._v("范式化的缺点：")]),t._v(" "),a("ul",[a("li",[t._v("通常需要关联查询。而关联查询代价较高，如果是分表的关联查询，代价更是高昂。")])]),t._v(" "),a("p",[t._v("在真实世界中，很少会极端地使用范式化或反范式化。实际上，应该权衡范式和反范式的利弊，混合使用。")]),t._v(" "),a("h2",{attrs:{id:"三、索引优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、索引优化"}},[t._v("#")]),t._v(" 三、索引优化")]),t._v(" "),a("blockquote",[a("p",[t._v("索引优化应该是查询性能优化的最有效手段。")]),t._v(" "),a("p",[t._v("如果想详细了解索引特性请参考："),a("a",{attrs:{href:"https://github.com/dunwu/db-tutorial/blob/master/docs/sql/mysql/mysql-index.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mysql 索引"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"何时使用索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何时使用索引"}},[t._v("#")]),t._v(" 何时使用索引")]),t._v(" "),a("ul",[a("li",[t._v("对于非常小的表，大部分情况下简单的全表扫描更高效。")]),t._v(" "),a("li",[t._v("对于中、大型表，索引非常有效。")]),t._v(" "),a("li",[t._v("对于特大型表，建立和使用索引的代价将随之增长。可以考虑使用分区技术。")]),t._v(" "),a("li",[t._v("如果表的数量特别多，可以建立一个元数据信息表，用来查询需要用到的某些特性。")])]),t._v(" "),a("h3",{attrs:{id:"索引优化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引优化策略"}},[t._v("#")]),t._v(" 索引优化策略")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("索引基本原则")]),t._v(" "),a("ul",[a("li",[t._v("索引不是越多越好，不要为所有列都创建索引。")]),t._v(" "),a("li",[t._v("要尽量避免冗余和重复索引。")]),t._v(" "),a("li",[t._v("要考虑删除未使用的索引。")]),t._v(" "),a("li",[t._v("尽量的扩展索引，不要新建索引。")]),t._v(" "),a("li",[t._v("频繁作为 "),a("code",[t._v("WHERE")]),t._v(" 过滤条件的列应该考虑添加索引。")])])]),t._v(" "),a("li",[a("strong",[t._v("独立的列")]),t._v(" - “独立的列” 是指索引列不能是表达式的一部分，也不能是函数的参数。")]),t._v(" "),a("li",[a("strong",[t._v("前缀索引")]),t._v(" - 索引很长的字符列，可以索引开始的部分字符，这样可以大大节约索引空间。")]),t._v(" "),a("li",[a("strong",[t._v("最左前缀匹配原则")]),t._v(" - 将选择性高的列或基数大的列优先排在多列索引最前列。")]),t._v(" "),a("li",[a("strong",[t._v("使用索引来排序")]),t._v(" - 索引最好既满足排序，又用于查找行。这样，就可以使用索引来对结果排序。")]),t._v(" "),a("li",[a("code",[t._v("=")]),t._v("、"),a("code",[t._v("IN")]),t._v(" 可以乱序 - 不需要考虑 "),a("code",[t._v("=")]),t._v("、"),a("code",[t._v("IN")]),t._v(" 等的顺序")])]),t._v(" "),a("h2",{attrs:{id:"四、sql-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、sql-优化"}},[t._v("#")]),t._v(" 四、SQL 优化")]),t._v(" "),a("p",[t._v("SQL 优化后，可以通过执行计划（"),a("code",[t._v("EXPLAIN")]),t._v("）来查看优化效果。")]),t._v(" "),a("p",[t._v("SQL 优化基本思路：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("只返回必要的列")]),t._v(" - 最好不要使用 "),a("code",[t._v("SELECT *")]),t._v(" 语句。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("只返回必要的行")]),t._v(" - 使用 WHERE 语句进行查询过滤，有时候也需要使用 LIMIT 语句来限制返回的数据。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("缓存重复查询的数据")]),t._v(" - 应该考虑在客户端使用缓存，尽量不要使用 Mysql 服务器缓存（存在较多问题和限制）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用索引来覆盖查询")])])])]),t._v(" "),a("h3",{attrs:{id:"优化-count-查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-count-查询"}},[t._v("#")]),t._v(" 优化 COUNT() 查询")]),t._v(" "),a("p",[a("code",[t._v("COUNT()")]),t._v(" 有两种作用：")]),t._v(" "),a("ul",[a("li",[t._v("统计某个列值的数量。统计列值时，要求列值是非 "),a("code",[t._v("NULL")]),t._v(" 的，它不会统计 "),a("code",[t._v("NULL")]),t._v("。")]),t._v(" "),a("li",[t._v("统计行数。")])]),t._v(" "),a("p",[a("strong",[t._v("统计列值时，要求列值是非空的，它不会统计 NULL")]),t._v("。如果确认括号中的表达式不可能为空时，实际上就是在统计行数。最简单的就是当使用 "),a("code",[t._v("COUNT(*)")]),t._v(" 时，并不是我们所想象的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计行数。")]),t._v(" "),a("p",[t._v("我们最常见的误解也就在这儿，在括号内指定了一列却希望统计结果是行数，而且还常常误以为前者的性能会更好。但实际并非这样，如果要统计行数，直接使用 "),a("code",[t._v("COUNT(*)")]),t._v("，意义清晰，且性能更好。")]),t._v(" "),a("p",[t._v("（1）简单优化")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("（2）使用近似值")]),t._v(" "),a("p",[t._v("有时候某些业务场景并不需要完全精确的统计值，可以用近似值来代替，"),a("code",[t._v("EXPLAIN")]),t._v(" 出来的行数就是一个不错的近似值，而且执行 "),a("code",[t._v("EXPLAIN")]),t._v(" 并不需要真正地去执行查询，所以成本非常低。通常来说，执行 "),a("code",[t._v("COUNT()")]),t._v(" 都需要扫描大量的行才能获取到精确的数据，因此很难优化，MySQL 层面还能做得也就只有覆盖索引了。如果不还能解决问题，只有从架构层面解决了，比如添加汇总表，或者使用 Redis 这样的外部缓存系统。")]),t._v(" "),a("h3",{attrs:{id:"优化关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化关联查询"}},[t._v("#")]),t._v(" 优化关联查询")]),t._v(" "),a("p",[t._v("在大数据场景下，表与表之间通过一个冗余字段来关联，要比直接使用 "),a("code",[t._v("JOIN")]),t._v(" 有更好的性能。")]),t._v(" "),a("p",[t._v("如果确实需要使用关联查询的情况下，需要特别注意的是：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("确保 "),a("code",[t._v("ON")]),t._v(" 和 "),a("code",[t._v("USING")]),t._v(" 字句中的列上有索引")]),t._v("。在创建索引的时候就要考虑到关联的顺序。当表 A 和表 B 用某列 column 关联的时候，如果优化器关联的顺序是 A、B，那么就不需要在 A 表的对应列上创建索引。没有用到的索引会带来额外的负担，一般来说，除非有其他理由，只需要在关联顺序中的第二张表的相应列上创建索引（具体原因下文分析）。")]),t._v(" "),a("li",[a("strong",[t._v("确保任何的 "),a("code",[t._v("GROUP BY")]),t._v(" 和 "),a("code",[t._v("ORDER BY")]),t._v(" 中的表达式只涉及到一个表中的列")]),t._v("，这样 MySQL 才有可能使用索引来优化。")])]),t._v(" "),a("p",[t._v("要理解优化关联查询的第一个技巧，就需要理解 MySQL 是如何执行关联查询的。当前 MySQL 关联执行的策略非常简单，它对任何的关联都执行"),a("strong",[t._v("嵌套循环关联")]),t._v("操作，即先在一个表中循环取出单条数据，然后在嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为为止。然后根据各个表匹配的行，返回查询中需要的各个列。")]),t._v(" "),a("p",[t._v("太抽象了？以上面的示例来说明，比如有这样的一个查询：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v("SELECT A.xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B.yy\nFROM A INNER JOIN B "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nWHERE A.xx IN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("假设 MySQL 按照查询中的关联顺序 A、B 来进行关联操作，那么可以用下面的伪代码表示 MySQL 如何完成这个查询：")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("outer_iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xx "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nouter_row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outer_iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer_row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inner_iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yy "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outer_row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    inner_row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inner_iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner_row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("inner_row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("outer_row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        inner_row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inner_iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    outer_row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outer_iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到，最外层的查询是根据"),a("code",[t._v("A.xx")]),t._v("列来查询的，"),a("code",[t._v("A.c")]),t._v("上如果有索引的话，整个关联查询也不会使用。再看内层的查询，很明显"),a("code",[t._v("B.c")]),t._v("上如果有索引的话，能够加速查询，因此只需要在关联顺序中的第二张表的相应列上创建索引即可。")]),t._v(" "),a("h3",{attrs:{id:"优化-group-by-和-distinct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-group-by-和-distinct"}},[t._v("#")]),t._v(" 优化 GROUP BY 和 DISTINCT")]),t._v(" "),a("p",[t._v("Mysql 优化器会在内部处理的时候相互转化这两类查询。它们都"),a("strong",[t._v("可以使用索引来优化，这也是最有效的优化方法")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"优化-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-limit"}},[t._v("#")]),t._v(" 优化 LIMIT")]),t._v(" "),a("p",[t._v("当需要分页操作时，通常会使用 "),a("code",[t._v("LIMIT")]),t._v(" 加上偏移量的办法实现，同时加上合适的 "),a("code",[t._v("ORDER BY")]),t._v(" 字句。"),a("strong",[t._v("如果有对应的索引，通常效率会不错，否则，MySQL 需要做大量的文件排序操作")]),t._v("。")]),t._v(" "),a("p",[t._v("一个常见的问题是当偏移量非常大的时候，比如："),a("code",[t._v("LIMIT 10000 20")]),t._v("这样的查询，MySQL 需要查询 10020 条记录然后只返回 20 条记录，前面的 10000 条都将被抛弃，这样的代价非常高。")]),t._v(" "),a("p",[t._v("优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。然后根据需要做一次关联查询再返回所有的列。对于偏移量很大时，这样做的效率会提升非常大。考虑下面的查询：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("description "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" title "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果这张表非常大，那么这个查询最好改成下面的样子：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("description\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" film_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" title "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" tmp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这里的延迟关联将大大提升查询效率，让 MySQL 扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询所需要的列。")]),t._v(" "),a("p",[t._v("有时候如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用"),a("code",[t._v("OFFSET")]),t._v("，比如下面的查询：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[t._v("SELECT id FROM t LIMIT "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n改为：\nSELECT id FROM t WHERE id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" LIMIT "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其他优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。")]),t._v(" "),a("h3",{attrs:{id:"优化-union"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-union"}},[t._v("#")]),t._v(" 优化 UNION")]),t._v(" "),a("p",[t._v("MySQL 总是通过创建并填充临时表的方式来执行 "),a("code",[t._v("UNION")]),t._v(" 查询。因此很多优化策略在"),a("code",[t._v("UNION")]),t._v("查询中都没有办法很好的时候。经常需要手动将"),a("code",[t._v("WHERE")]),t._v("、"),a("code",[t._v("LIMIT")]),t._v("、"),a("code",[t._v("ORDER BY")]),t._v("等字句“下推”到各个子查询中，以便优化器可以充分利用这些条件先优化。")]),t._v(" "),a("p",[t._v("除非确实需要服务器去重，否则就一定要使用"),a("code",[t._v("UNION ALL")]),t._v("，如果没有"),a("code",[t._v("ALL")]),t._v("关键字，MySQL 会给临时表加上"),a("code",[t._v("DISTINCT")]),t._v("选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。当然即使使用 ALL 关键字，MySQL 总是将结果放入临时表，然后再读出，再返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把每个子查询的结果返回给客户端。")]),t._v(" "),a("h3",{attrs:{id:"优化查询方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化查询方式"}},[t._v("#")]),t._v(" 优化查询方式")]),t._v(" "),a("h4",{attrs:{id:"切分大查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切分大查询"}},[t._v("#")]),t._v(" 切分大查询")]),t._v(" "),a("p",[t._v("一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("DELEFT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" messages "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MONTH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" {\n    rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" do_query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE FROM messages WHERE create  < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n} "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h4",{attrs:{id:"分解大连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分解大连接查询"}},[t._v("#")]),t._v(" 分解大连接查询")]),t._v(" "),a("p",[t._v("将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：")]),t._v(" "),a("ul",[a("li",[t._v("让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。")]),t._v(" "),a("li",[t._v("分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。")]),t._v(" "),a("li",[t._v("减少锁竞争；")]),t._v(" "),a("li",[t._v("在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。")]),t._v(" "),a("li",[t._v("查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mysql'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mysql'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("567")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9098")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8904")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"五、执行计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、执行计划"}},[t._v("#")]),t._v(" 五、执行计划")]),t._v(" "),a("p",[t._v("如何检验修改后的 SQL 确实有优化效果？这就需要用到执行计划（"),a("code",[t._v("EXPLAIN")]),t._v("）。")]),t._v(" "),a("p",[t._v("使用执行计划 "),a("code",[t._v("EXPLAIN")]),t._v(" 用来分析 "),a("code",[t._v("SELECT")]),t._v(" 查询效率，开发人员可以通过分析 "),a("code",[t._v("EXPLAIN")]),t._v(" 结果来优化查询语句。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" user_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\\G\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n           id: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  select_type: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SIMPLE")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(": user_info\n   partitions: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(": const\npossible_keys: "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v("\n      key_len: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n          ref: const\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n     filtered: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100.00")]),t._v("\n        Extra: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" warning "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("各列含义如下：")]),t._v(" "),a("ul",[a("li",[t._v("id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符.")]),t._v(" "),a("li",[t._v("select_type: SELECT 查询的类型.\n"),a("ul",[a("li",[t._v("SIMPLE, 表示此查询不包含 UNION 查询或子查询")]),t._v(" "),a("li",[t._v("PRIMARY, 表示此查询是最外层的查询")]),t._v(" "),a("li",[t._v("UNION, 表示此查询是 UNION 的第二或随后的查询")]),t._v(" "),a("li",[t._v("DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询")]),t._v(" "),a("li",[t._v("UNION RESULT, UNION 的结果")]),t._v(" "),a("li",[t._v("SUBQUERY, 子查询中的第一个 SELECT")]),t._v(" "),a("li",[t._v("DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.")])])]),t._v(" "),a("li",[t._v("table: 查询的是哪个表")]),t._v(" "),a("li",[t._v("partitions: 匹配的分区")]),t._v(" "),a("li",[t._v("type: join 类型")]),t._v(" "),a("li",[t._v("possible_keys: 此次查询中可能选用的索引")]),t._v(" "),a("li",[t._v("key: 此次查询中确切使用到的索引.")]),t._v(" "),a("li",[t._v("ref: 哪个字段或常数与 key 一起被使用")]),t._v(" "),a("li",[t._v("rows: 显示此查询一共扫描了多少行. 这个是一个估计值.")]),t._v(" "),a("li",[t._v("filtered: 表示此查询条件所过滤的数据的百分比")]),t._v(" "),a("li",[t._v("extra: 额外的信息")])]),t._v(" "),a("blockquote",[a("p",[t._v("更多内容请参考："),a("a",{attrs:{href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 性能优化神器 Explain 使用分析"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《高性能 MySQL》"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/d7665192aaaf",target:"_blank",rel:"noopener noreferrer"}},[t._v("我必须得告诉大家的 MySQL 优化原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("20+ 条 MySQL 性能优化的最佳经验"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 性能优化神器 Explain 使用分析"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"传送门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传送门"}},[t._v("#")]),t._v(" 传送门")]),t._v(" "),a("p",[t._v("◾ 🏠 "),a("a",{attrs:{href:"https://github.com/dunwu/db-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("DB-TUTORIAL 首页"),a("OutboundLink")],1),t._v(" ◾ 🎯 "),a("a",{attrs:{href:"https://github.com/dunwu/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("我的博客"),a("OutboundLink")],1),t._v(" ◾")])])}),[],!1,null,null,null);s.default=e.exports}}]);