(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{502:function(t,s,a){"use strict";a.r(s);var e=a(14),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务"}},[t._v("#")]),t._v(" Mysql 事务")]),t._v(" "),a("h2",{attrs:{id:"一、事务简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、事务简介"}},[t._v("#")]),t._v(" 一、事务简介")]),t._v(" "),a("blockquote",[a("p",[t._v("事务简单来说："),a("strong",[t._v("一个 Session 中所进行所有的操作，要么同时成功，要么同时失败")]),t._v("。进一步说，事务指的是满足 ACID 特性的一组操作，可以通过 "),a("code",[t._v("Commit")]),t._v(" 提交一个事务，也可以使用 "),a("code",[t._v("Rollback")]),t._v(" 进行回滚。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("事务就是一组原子性的 SQL 语句")]),t._v("。具体来说，事务指的是满足 ACID 特性的一组操作。")]),t._v(" "),a("p",[a("strong",[t._v("事务内的 SQL 语句，要么全执行成功，要么全执行失败")]),t._v("。")]),t._v(" "),a("p",[t._v("想象一下，如果没有事务，在并发环境下，就可能出现丢失修改的问题。")]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 和 T"),a("sub",[t._v("2")]),t._v(" 两个线程都对一个数据进行修改，T"),a("sub",[t._v("1")]),t._v(" 先修改，T"),a("sub",[t._v("2")]),t._v(" 随后修改，T"),a("sub",[t._v("2")]),t._v(" 的修改覆盖了 T"),a("sub",[t._v("1")]),t._v(" 的修改。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9.png",alt:"img"}})]),t._v(" "),a("p",[t._v("不是所有的 Mysql 存储引擎都实现了事务处理。支持事务的存储引擎有："),a("code",[t._v("InnoDB")]),t._v(" 和 "),a("code",[t._v("NDB Cluster")]),t._v("。")]),t._v(" "),a("p",[t._v("用户可以根据业务是否需要事务处理（事务处理可以保证数据安全，但会增加系统开销），选择合适的存储引擎。")]),t._v(" "),a("h2",{attrs:{id:"二、事务用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、事务用法"}},[t._v("#")]),t._v(" 二、事务用法")]),t._v(" "),a("h3",{attrs:{id:"事务处理指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务处理指令"}},[t._v("#")]),t._v(" 事务处理指令")]),t._v(" "),a("p",[t._v("Mysql 中，使用 "),a("code",[t._v("START TRANSACTION")]),t._v(" 语句开始一个事务；使用 "),a("code",[t._v("COMMIT")]),t._v(" 语句提交所有的修改；使用 "),a("code",[t._v("ROLLBACK")]),t._v(" 语句撤销所有的修改。不能回退 "),a("code",[t._v("SELECT")]),t._v(" 语句，回退 "),a("code",[t._v("SELECT")]),t._v(" 语句也没意义；也不能回退 "),a("code",[t._v("CREATE")]),t._v(" 和 "),a("code",[t._v("DROP")]),t._v(" 语句。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("START TRANSACTION")]),t._v(" - 指令用于标记事务的起始点。")]),t._v(" "),a("li",[a("code",[t._v("SAVEPOINT")]),t._v(" - 指令用于创建保留点。")]),t._v(" "),a("li",[a("code",[t._v("ROLLBACK TO")]),t._v(" - 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到 "),a("code",[t._v("START TRANSACTION")]),t._v(" 语句处。")]),t._v(" "),a("li",[a("code",[t._v("COMMIT")]),t._v(" - 提交事务。")])]),t._v(" "),a("p",[t._v("事务处理示例：")]),t._v(" "),a("p",[t._v("（1）创建一张示例表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 撤销表 user")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建表 user")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  username "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'用户名'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  password "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'密码'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'邮箱'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'用户表'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("（2）执行事务操作")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 开始事务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 插入操作 A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx@163.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建保留点 updateA")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" updateA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 插入操作 B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxxx@163.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚到保留点 updateA")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" updateA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 提交事务，只有操作 A 生效")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("（3）执行结果")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1\troot1\troot1\txxxx@163.com\n")])])]),a("h3",{attrs:{id:"autocommit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocommit"}},[t._v("#")]),t._v(" AUTOCOMMIT")]),t._v(" "),a("p",[a("strong",[t._v("MySQL 默认采用隐式提交策略（"),a("code",[t._v("autocommit")]),t._v("）")]),t._v("。每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 "),a("code",[t._v("START TRANSACTION")]),t._v(" 语句时，会关闭隐式提交；当 "),a("code",[t._v("COMMIT")]),t._v(" 或 "),a("code",[t._v("ROLLBACK")]),t._v(" 语句执行后，事务会自动关闭，重新恢复隐式提交。")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("set autocommit=0")]),t._v(" 可以取消自动提交，直到 "),a("code",[t._v("set autocommit=1")]),t._v(" 才会提交；"),a("code",[t._v("autocommit")]),t._v(" 标记是针对每个连接而不是针对服务器的。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查看 AUTOCOMMIT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHOW")]),t._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AUTOCOMMIT'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 关闭 AUTOCOMMIT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" autocommit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 开启 AUTOCOMMIT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" autocommit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"三、acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、acid"}},[t._v("#")]),t._v(" 三、ACID")]),t._v(" "),a("p",[t._v("ACID 是数据库事务正确执行的四个基本要素。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原子性（Atomicity）")]),t._v(" "),a("ul",[a("li",[t._v("事务被视为不可分割的最小单元，事务中的所有操作要么全部提交成功，要么全部失败回滚。")]),t._v(" "),a("li",[t._v("回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。")])])]),t._v(" "),a("li",[a("strong",[t._v("一致性（Consistency）")]),t._v(" "),a("ul",[a("li",[t._v("数据库在事务执行前后都保持一致性状态。")]),t._v(" "),a("li",[t._v("在一致性状态下，所有事务对一个数据的读取结果都是相同的。")])])]),t._v(" "),a("li",[a("strong",[t._v("隔离性（Isolation）")]),t._v(" "),a("ul",[a("li",[t._v("一个事务所做的修改在最终提交以前，对其它事务是不可见的。")])])]),t._v(" "),a("li",[a("strong",[t._v("持久性（Durability）")]),t._v(" "),a("ul",[a("li",[t._v("一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。")]),t._v(" "),a("li",[t._v("可以通过数据库备份和恢复来实现，在系统发生奔溃时，使用备份的数据库进行数据恢复。")])])])]),t._v(" "),a("p",[a("strong",[t._v("一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易。")])]),t._v(" "),a("ul",[a("li",[t._v("只有满足一致性，事务的执行结果才是正确的。")]),t._v(" "),a("li",[t._v("在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。")]),t._v(" "),a("li",[t._v("在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。")]),t._v(" "),a("li",[t._v("事务满足持久化是为了能应对系统崩溃的情况。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93ACID.png",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("MySQL 默认采用自动提交模式（"),a("code",[t._v("AUTO COMMIT")]),t._v("）。也就是说，如果不显式使用 "),a("code",[t._v("START TRANSACTION")]),t._v(" 语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。")])]),t._v(" "),a("h2",{attrs:{id:"四、事务隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、事务隔离级别"}},[t._v("#")]),t._v(" 四、事务隔离级别")]),t._v(" "),a("p",[t._v("在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。")]),t._v(" "),a("p",[t._v("在 SQL 标准中，定义了四种事务隔离级别（级别由低到高）：")]),t._v(" "),a("ul",[a("li",[t._v("未提交读")]),t._v(" "),a("li",[t._v("提交读")]),t._v(" "),a("li",[t._v("可重复读")]),t._v(" "),a("li",[t._v("串行化")])]),t._v(" "),a("p",[t._v("Mysql 中查看和设置事务隔离级别：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查看事务隔离级别")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHOW")]),t._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'transaction_isolation'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置事务隔离级别为 READ UNCOMMITTED")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置事务隔离级别为 READ COMMITTED")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMITTED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置事务隔离级别为 REPEATABLE READ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置事务隔离级别为 SERIALIZABLE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SERIALIZABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"未提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未提交读"}},[t._v("#")]),t._v(" 未提交读")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("未提交读（READ UNCOMMITTED）")]),t._v(" 是指：事务中的修改，即使没有提交，对其它事务也是可见的")]),t._v("。")]),t._v(" "),a("p",[t._v("未提交读的问题：事务可以读取未提交的数据，也被称为 "),a("strong",[t._v("脏读（Dirty Read）")]),t._v("。")]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 修改一个数据，T"),a("sub",[t._v("2")]),t._v(" 随后读取这个数据。如果 T"),a("sub",[t._v("1")]),t._v(" 撤销了这次修改，那么 T"),a("sub",[t._v("2")]),t._v(" 读取的数据是脏数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E8%84%8F%E6%95%B0%E6%8D%AE.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交读"}},[t._v("#")]),t._v(" 提交读")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("提交读（READ COMMITTED）")]),t._v(" 是指：一个事务只能读取已经提交的事务所做的修改")]),t._v("。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。提交读解决了脏读的问题。")]),t._v(" "),a("p",[t._v("提交读是大多数数据库的默认事务隔离级别。")]),t._v(" "),a("p",[t._v("提交读有时也叫不可重复读，它的问题是：执行两次相同的查询，得到的结果可能不一致。")]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("2")]),t._v(" 读取一个数据，T"),a("sub",[t._v("1")]),t._v(" 对该数据做了修改。如果 T"),a("sub",[t._v("2")]),t._v(" 再次读取这个数据，此时读取的结果和第一次读取的结果不同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"可重复读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可重复读"}},[t._v("#")]),t._v(" 可重复读")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("可重复读（REPEATABLE READ）")]),t._v(" 是指：保证在同一个事务中多次读取同样数据的结果是一样的")]),t._v("。可重复读解决了不可重复读问题。")]),t._v(" "),a("p",[t._v("可重复读是 Mysql 的默认事务隔离级别。")]),t._v(" "),a("p",[t._v("可重复读的问题：当某个事务读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务又再次读取该范围的记录时，会产生 "),a("strong",[t._v("幻读（Phantom Read）")]),t._v("。")]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 读取某个范围的数据，T"),a("sub",[t._v("2")]),t._v(" 在这个范围内插入新的数据，T"),a("sub",[t._v("1")]),t._v(" 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E5%B9%BB%E8%AF%BB.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"串行化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串行化"}},[t._v("#")]),t._v(" 串行化")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("串行化（SERIALIXABLE）")]),t._v(" 是指：强制事务串行执行")]),t._v("。")]),t._v(" "),a("p",[t._v("强制事务串行执行，则避免了所有的并发问题。串行化策略会在读取的每一行数据上都加锁，这可能导致大量的超时和锁竞争。这对于高并发应用基本上是不可接受的，所以一般不会采用这个级别。")]),t._v(" "),a("h3",{attrs:{id:"隔离级别小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别小结"}},[t._v("#")]),t._v(" 隔离级别小结")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("未提交读（READ UNCOMMITTED）")])]),t._v(" - 事务中的修改，即使没有提交，对其它事务也是可见的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("提交读（READ COMMITTED）")])]),t._v(" - 一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("重复读（REPEATABLE READ）")])]),t._v(" - 保证在同一个事务中多次读取同样数据的结果是一样的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("串行化（SERIALIXABLE）")])]),t._v(" - 强制事务串行执行。")])]),t._v(" "),a("p",[t._v("数据库隔离级别解决的问题：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("隔离级别")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("脏读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("不可重复读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("未提交读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("提交读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可重复读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可串行化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")])])])]),t._v(" "),a("h2",{attrs:{id:"五、死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、死锁"}},[t._v("#")]),t._v(" 五、死锁")]),t._v(" "),a("p",[t._v("死锁是指两个或多个事务竞争同一资源，并请求锁定对方占用的资源，从而导致恶性循环的现象。")]),t._v(" "),a("p",[t._v("产生死锁的场景：")]),t._v(" "),a("p",[t._v("当多个事务试图以不同的顺序锁定资源时，就可能会产生死锁。")]),t._v(" "),a("p",[t._v("多个事务同时锁定同一个资源时，也会产生死锁。")]),t._v(" "),a("p",[t._v("为了解决死锁问题，不同数据库实现了各自的死锁检测和超时机制。InnoDB 的处理策略是："),a("strong",[t._v("将持有最少行级排它锁的事务进行回滚")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"六、分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、分布式事务"}},[t._v("#")]),t._v(" 六、分布式事务")]),t._v(" "),a("p",[t._v("在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为 "),a("strong",[t._v("本地事务")]),t._v("。几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。")]),t._v(" "),a("p",[a("strong",[t._v("分布式事务")]),t._v(" 是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。")]),t._v(" "),a("h3",{attrs:{id:"两阶段提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[t._v("#")]),t._v(" 两阶段提交")]),t._v(" "),a("p",[t._v("两阶段提交（XA）对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于 XA 协议的分布式事务。 XA 协议能够严格保障事务 "),a("code",[t._v("ACID")]),t._v(" 特性。")]),t._v(" "),a("p",[t._v("严格保障事务 "),a("code",[t._v("ACID")]),t._v(" 特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于 XA 协议的分布式事务并不是最佳选择。")]),t._v(" "),a("h3",{attrs:{id:"柔性事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柔性事务"}},[t._v("#")]),t._v(" 柔性事务")]),t._v(" "),a("p",[t._v("如果将实现了"),a("code",[t._v("ACID")]),t._v(" 的事务要素的事务称为刚性事务的话，那么基于"),a("code",[t._v("BASE")]),t._v("事务要素的事务则称为柔性事务。 "),a("code",[t._v("BASE")]),t._v("是基本可用、柔性状态和最终一致性这三个要素的缩写。")]),t._v(" "),a("ul",[a("li",[t._v("基本可用（Basically Available）保证分布式事务参与方不一定同时在线。")]),t._v(" "),a("li",[t._v("柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。")]),t._v(" "),a("li",[t._v("而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。")])]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("ACID")]),t._v("事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。")]),t._v(" "),a("p",[t._v("基于"),a("code",[t._v("ACID")]),t._v("的强一致性事务和基于"),a("code",[t._v("BASE")]),t._v("的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。 可通过下表详细对比它们之间的区别，以帮助开发者进行技术选型。")]),t._v(" "),a("h3",{attrs:{id:"事务方案对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务方案对比"}},[t._v("#")]),t._v(" 事务方案对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("本地事务")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("两（三）阶段事务")]),t._v(" "),a("th",[t._v("柔性事务")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("业务改造")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",[t._v("实现相关接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("一致性")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("支持")]),t._v(" "),a("td",[t._v("最终一致")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("隔离性")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("支持")]),t._v(" "),a("td",[t._v("业务方保证")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("并发性能")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无影响")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("严重衰退")]),t._v(" "),a("td",[t._v("略微衰退")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("适合场景")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("业务方处理不一致")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("短事务 & 低并发")]),t._v(" "),a("td",[t._v("长事务 & 高并发")])])])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/23008813/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《高性能 MySQL》"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/transaction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ShardingSphere 分布式事务"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=v.exports}}]);